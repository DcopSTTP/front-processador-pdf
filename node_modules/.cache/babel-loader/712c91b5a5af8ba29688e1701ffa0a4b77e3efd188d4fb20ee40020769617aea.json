{"ast":null,"code":"// Funções para manipulação e processamento de PDF\n\nexport const loadPDFJS = () => {\n  return new Promise((resolve, reject) => {\n    if (window.pdfjsLib) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';\n    script.onload = () => {\n      if (window.pdfjsLib) {\n        resolve();\n      } else {\n        reject(new Error('Falha ao carregar PDF.js'));\n      }\n    };\n    script.onerror = () => reject(new Error('Erro ao carregar PDF.js'));\n    document.head.appendChild(script);\n  });\n};\nexport const extractDataFromPDF = async file => {\n  try {\n    // Carregar PDF.js via script tag\n    if (!window.pdfjsLib) {\n      await loadPDFJS();\n    }\n\n    // Configurar worker\n    window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n\n    // Converter arquivo para ArrayBuffer\n    const arrayBuffer = await file.arrayBuffer();\n\n    // Carregar PDF\n    const pdf = await window.pdfjsLib.getDocument(arrayBuffer).promise;\n    let fullText = '';\n\n    // Extrair texto de todas as páginas\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      const pageText = textContent.items.map(item => item.str).join(' ');\n      fullText += pageText + '\\n';\n    }\n\n    // Processar texto extraído usando regex e parsing manual\n    const extractedData = parseOccurrenceData(fullText);\n    return extractedData;\n  } catch (error) {\n    throw new Error('Falha ao processar o PDF: ' + error.message);\n  }\n};\n\n// Função para transformar dados extraídos no formato esperado pelo backend\nexport const formatDataForBackend = extractedData => {\n  var _extractedData$dadosL, _extractedData$dadosL2, _extractedData$dadosL3, _extractedData$dadosL4, _extractedData$dadosL5;\n  const backendData = {\n    numeroOcorrencia: extractedData.numeroOcorrencia || '',\n    natureza: extractedData.naturezaInicial || '',\n    narrativas: extractedData.narrativas || '',\n    localizacao: {\n      logradouro: ((_extractedData$dadosL = extractedData.dadosLocalizacao1) === null || _extractedData$dadosL === void 0 ? void 0 : _extractedData$dadosL.logradouro) || '',\n      bairro: ((_extractedData$dadosL2 = extractedData.dadosLocalizacao1) === null || _extractedData$dadosL2 === void 0 ? void 0 : _extractedData$dadosL2.bairro) || '',\n      pontoReferencia: ((_extractedData$dadosL3 = extractedData.dadosLocalizacao2) === null || _extractedData$dadosL3 === void 0 ? void 0 : _extractedData$dadosL3.pontoReferencia) || '',\n      lat: ((_extractedData$dadosL4 = extractedData.dadosLocalizacao2) === null || _extractedData$dadosL4 === void 0 ? void 0 : _extractedData$dadosL4.latitude) || '',\n      long: ((_extractedData$dadosL5 = extractedData.dadosLocalizacao2) === null || _extractedData$dadosL5 === void 0 ? void 0 : _extractedData$dadosL5.longitude) || ''\n    },\n    empenhos: [],\n    relatos: ''\n  };\n\n  // Processar empenhos se existirem dados\n  if (extractedData.empenhos && extractedData.empenhos.vtr !== 'Ocorrência Não Empenhada') {\n    const empenhoData = {\n      vtr: extractedData.empenhos.vtr || '',\n      equipamentos: extractedData.empenhos.equipamentos || '',\n      despachado: extractedData.empenhos.despachado || '',\n      deslocamento: extractedData.empenhos.deslocamento || '',\n      chegadaLocal: extractedData.empenhos.chegadaLocal || '',\n      liberado: extractedData.empenhos.liberado || ''\n    };\n    backendData.empenhos.push(empenhoData);\n  }\n\n  // Processar relatos - agora como string simples\n  if (extractedData.relatos && extractedData.relatos !== 'Nenhum relato adicional') {\n    backendData.relatos = extractedData.relatos;\n  }\n  return backendData;\n};\nexport const saveDataToBackend = async extractedData => {\n  try {\n    // Importar o service dinamicamente para evitar problemas de dependência circular\n    const {\n      salvarOcorrencia\n    } = await import('../service/UserService');\n\n    // Transformar dados para o formato esperado pelo backend\n    const formattedData = formatDataForBackend(extractedData);\n\n    // Log para debug - mostrar como ficou o JSON\n\n    // Usar o service para manter a padronização e incluir o token automaticamente\n    const result = await salvarOcorrencia(formattedData);\n\n    // Log da resposta do backend\n\n    return result;\n  } catch (error) {\n    throw new Error('Falha ao salvar dados no sistema: ' + error.message);\n  }\n};\nexport const generateNewPDF = async data => {\n  try {\n    var _data$dadosLocalizaca, _data$dadosLocalizaca2, _data$dadosLocalizaca3, _data$dadosLocalizaca4, _data$dadosLocalizaca5, _data$dadosLocalizaca6, _data$dadosLocalizaca7, _data$dadosLocalizaca8, _data$dadosLocalizaca9, _data$dadosLocalizaca0, _data$dadosLocalizaca1, _data$empenhos, _data$empenhos2, _data$empenhos3, _data$empenhos4, _data$empenhos5, _data$empenhos6;\n    const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Relatório de Ocorrência</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            font-size: 12px;\n            line-height: 1.4;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            border-bottom: 2px solid #333;\n            padding-bottom: 15px;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 18px;\n            color: #333;\n        }\n        .header p {\n            margin: 5px 0;\n            color: #666;\n        }\n        .section {\n            margin-bottom: 20px;\n            page-break-inside: avoid;\n        }\n        .section-title {\n            background-color: #f0f0f0;\n            padding: 8px 12px;\n            font-weight: bold;\n            border-left: 4px solid #2563eb;\n            margin-bottom: 10px;\n        }\n        .field-group {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin-bottom: 10px;\n        }\n        .field {\n            flex: 1;\n            min-width: 200px;\n        }\n        .field-label {\n            font-weight: bold;\n            color: #333;\n        }\n        .field-value {\n            color: #555;\n            margin-top: 2px;\n        }\n        .full-width {\n            width: 100%;\n        }\n        .footer {\n            margin-top: 40px;\n            text-align: center;\n            font-size: 10px;\n            color: #888;\n            border-top: 1px solid #ddd;\n            padding-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Central de Atendimento e Despacho</h1>\n        <p>Superintendência de Trânsito e Transportes Públicos</p>\n        <p>Relatório de Ocorrência Reorganizado</p>\n        <p><strong>Ocorrência N°:</strong> ${data.numeroOcorrencia || 'Não informado'}</p>\n        <p><strong>Data/Hora:</strong> ${data.dataHora || 'Não informado'}</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">1. NATUREZA INICIAL</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Natureza:</div>\n            <div class=\"field-value\">${data.naturezaInicial || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">2. NARRATIVAS</div>\n        <div class=\"field full-width\">\n            <div class=\"field-label\">Descrição:</div>\n            <div class=\"field-value\">${data.narrativas || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">3. DADOS DA LOCALIZAÇÃO (PRINCIPAL)</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Município:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca = data.dadosLocalizacao1) === null || _data$dadosLocalizaca === void 0 ? void 0 : _data$dadosLocalizaca.municipio) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Logradouro:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca2 = data.dadosLocalizacao1) === null || _data$dadosLocalizaca2 === void 0 ? void 0 : _data$dadosLocalizaca2.logradouro) || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Bairro:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca3 = data.dadosLocalizacao1) === null || _data$dadosLocalizaca3 === void 0 ? void 0 : _data$dadosLocalizaca3.bairro) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Complemento:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca4 = data.dadosLocalizacao1) === null || _data$dadosLocalizaca4 === void 0 ? void 0 : _data$dadosLocalizaca4.complemento) || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field\">\n            <div class=\"field-label\">Tipo de Local:</div>\n            <div class=\"field-value\">${((_data$dadosLocalizaca5 = data.dadosLocalizacao1) === null || _data$dadosLocalizaca5 === void 0 ? void 0 : _data$dadosLocalizaca5.tipoLocal) || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">4. DADOS DA LOCALIZAÇÃO (DETALHES)</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Tipo de Via:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca6 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca6 === void 0 ? void 0 : _data$dadosLocalizaca6.tipoVia) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Número:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca7 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca7 === void 0 ? void 0 : _data$dadosLocalizaca7.numero) || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">CEP:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca8 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca8 === void 0 ? void 0 : _data$dadosLocalizaca8.cep) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Ponto de Referência:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca9 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca9 === void 0 ? void 0 : _data$dadosLocalizaca9.pontoReferencia) || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Latitude:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca0 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca0 === void 0 ? void 0 : _data$dadosLocalizaca0.latitude) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Longitude:</div>\n                <div class=\"field-value\">${((_data$dadosLocalizaca1 = data.dadosLocalizacao2) === null || _data$dadosLocalizaca1 === void 0 ? void 0 : _data$dadosLocalizaca1.longitude) || 'Não informado'}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">5. EMPENHOS - VTR E EQUIPAMENTOS</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">VTR:</div>\n                <div class=\"field-value\">${((_data$empenhos = data.empenhos) === null || _data$empenhos === void 0 ? void 0 : _data$empenhos.vtr) || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Equipamentos:</div>\n                <div class=\"field-value\">${((_data$empenhos2 = data.empenhos) === null || _data$empenhos2 === void 0 ? void 0 : _data$empenhos2.equipamentos) || 'Não informado'}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">6. EMPENHO - DESPACHADO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Despacho:</div>\n            <div class=\"field-value\">${((_data$empenhos3 = data.empenhos) === null || _data$empenhos3 === void 0 ? void 0 : _data$empenhos3.despachado) || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">7. EMPENHOS - EM DESLOCAMENTO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Status:</div>\n            <div class=\"field-value\">${((_data$empenhos4 = data.empenhos) === null || _data$empenhos4 === void 0 ? void 0 : _data$empenhos4.deslocamento) || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">8. EMPENHOS - CHEGADA NO LOCAL</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Chegada:</div>\n            <div class=\"field-value\">${((_data$empenhos5 = data.empenhos) === null || _data$empenhos5 === void 0 ? void 0 : _data$empenhos5.chegadaLocal) || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">9. EMPENHOS - LIBERADO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Liberação:</div>\n            <div class=\"field-value\">${((_data$empenhos6 = data.empenhos) === null || _data$empenhos6 === void 0 ? void 0 : _data$empenhos6.liberado) || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">10. RELATOS</div>\n        <div class=\"field full-width\">\n            <div class=\"field-label\">Relatos Adicionais:</div>\n            <div class=\"field-value\">${data.relatos || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <p>Relatório gerado automaticamente em ${new Date().toLocaleString('pt-BR')}</p>\n        <p>STTP - Sistema de Processamento de Ocorrências</p>\n    </div>\n</body>\n</html>`;\n\n    // Criar blob do HTML\n    const blob = new Blob([htmlContent], {\n      type: 'text/html'\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Criar link para download\n    const link = document.createElement('a');\n    link.href = url;\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    link.download = `relatorio_ocorrencia_${timestamp}.html`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n    return true;\n  } catch (error) {\n    throw new Error('Falha ao gerar relatório');\n  }\n};\nexport const parseOccurrenceData = text => {\n  const dadosLocalizacaoExtraidos = extrairDadosLocalizacao(text);\n  const result = {\n    numeroOcorrencia: extrairNumeroOcorrencia(text),\n    naturezaInicial: extrairDadosGerais(text),\n    narrativas: extrairNarrativas(text),\n    dadosLocalizacao1: dadosLocalizacaoExtraidos.dadosLocalizacao1,\n    dadosLocalizacao2: dadosLocalizacaoExtraidos.dadosLocalizacao2,\n    empenhos: extrairEmpenhos(text),\n    relatos: extrairRelatos(text)\n  };\n  return result;\n};\n\n// Função auxiliar para extração\nconst extractField = (pattern, text, defaultValue = 'Não informado') => {\n  const match = text.match(pattern);\n  return match ? match[1].trim() : defaultValue;\n};\n\n// Funções específicas para cada seção\nconst extrairNumeroOcorrencia = text => {\n  // *** EXTRAIR NÚMERO DA OCORRÊNCIA *** \\\\\n  let numeroOcorrencia = 'Não informado';\n  const regexCompleto = /Ocorrência\\s*N°:\\s*([A-Z0-9-]+(?:\\s*[A-Z-]+)*)/;\n  const matchCompleto = text.match(regexCompleto);\n  if (matchCompleto) {\n    numeroOcorrencia = matchCompleto[1].replace(/\\s+/g, '');\n  } else {\n    const regexAlternativo = /N°:\\s*([A-Z0-9-]+(?:\\s+[A-Z-]+)*?)(?=\\s*[A-Z][a-z]|\\s*Data|$)/;\n    const matchAlternativo = text.match(regexAlternativo);\n    if (matchAlternativo) {\n      numeroOcorrencia = matchAlternativo[1].replace(/\\s+/g, '');\n    }\n  }\n  if (numeroOcorrencia.endsWith('-')) {\n    const posicao = text.indexOf(numeroOcorrencia);\n    if (posicao !== -1) {\n      const textoApos = text.substring(posicao + numeroOcorrencia.length, posicao + numeroOcorrencia.length + 20);\n      const matchResto = textoApos.match(/^([A-Z-]+)/);\n      if (matchResto) {\n        numeroOcorrencia += matchResto[1];\n      }\n    }\n  }\n  const padraoEspecifico = numeroOcorrencia.match(/^(CIMOB\\d+-\\d+-[A-Z]+-[A-Z]{3})/);\n  if (padraoEspecifico) {\n    numeroOcorrencia = padraoEspecifico[1];\n  } else {\n    const padraoGenerico = numeroOcorrencia.match(/^([A-Z]+\\d+-\\d+-[A-Z]+-[A-Z]{3})/);\n    if (padraoGenerico) {\n      numeroOcorrencia = padraoGenerico[1];\n    }\n  }\n  return numeroOcorrencia; // ← ADICIONE ESTE RETURN\n};\nconst extrairDadosGerais = text => {\n  // Usar lookahead mais específico ao invés de [^P]\n  const naturezaInicial = extractField(/Natureza\\s*Inicial:\\s*(.*?)(?=\\s*Prioridade\\s*:)/, text);\n  return naturezaInicial.trim();\n};\nconst extrairNarrativas = text => {\n  const descricaoNarrativa = extractField(/\"([^\"]+)\"/, text);\n  return `\"${descricaoNarrativa.trim()}\"`;\n};\nconst extrairDadosLocalizacao = text => {\n  // Primeira coluna\n  let municipio = extractField(/Município\\/UF:\\s*([^L]+?)(?=\\s*Logradouro:)/, text);\n  if (municipio === 'Não informado') {\n    municipio = extractField(/Município[^:]*:\\s*([^L]+)(?=Logradouro)/i, text);\n  }\n\n  // Melhorar extração do logradouro - tentar vários padrões\n  let logradouro = extractField(/Logradouro:\\s*([^B]+?)(?=\\s*Bairro:)/, text);\n  if (logradouro === 'Não informado') {\n    // Tentar padrão alternativo sem lookahead específico\n    logradouro = extractField(/Logradouro:\\s*([^\\n\\r]+)/, text);\n    if (logradouro !== 'Não informado') {\n      // Limpar possível texto que pode vir junto\n      logradouro = logradouro.replace(/\\s*Bairro:.*$/, '').trim();\n    }\n  }\n  let bairro = extractField(/Bairro:\\s*([^C]+?)(?=\\s*Complemento)/, text);\n  if (bairro === 'Não informado') {\n    bairro = extractField(/Bairro[^:]*:\\s*([^L]+)(?=Complemento)/i, text);\n  }\n  let complemento = extractField(/Complemento:\\s*([^T]+?)(?=\\s*Tipo\\s*de\\s*Local:)/, text);\n  if (complemento === 'Não informado') {\n    complemento = extractField(/Complemento[^:]*:\\s*([^L]+)(?=Local)/i, text);\n  }\n  const tipoLocal = extractField(/Tipo\\s*de\\s*Local:\\s*([^T]+?)(?=\\s*Tipo\\s*de\\s*Via:)/, text);\n\n  // Segunda coluna\n  const tipoVia = extractField(/Tipo\\s*de\\s*Via:\\s*([^N]+?)(?=\\s*Número:)/, text);\n  const numero = extractField(/Número:\\s*([^C]+?)(?=\\s*CEP:)/, text);\n  const cep = extractField(/CEP:\\s*([^P]+?)(?=\\s*Ponto\\s*de\\s*Referência:)/, text);\n  const pontoReferencia = extractField(/Ponto\\s*de\\s*Referência:\\s*([^\\r\\n]+?)(?=\\s*Lat\\s*\\/\\s*Long:)/, text);\n\n  // Extrair Lat/Long com formato específico: -7.220458900000001 , -7.220458900000001\n  const latLongCompleto = extractField(/Lat\\s*\\/\\s*Long:\\s*([^N]+?)(?=\\s*Narrativas)/, text);\n\n  // Separar latitude e longitude\n  let latitude = 'Não informado';\n  let longitude = 'Não informado';\n  if (latLongCompleto !== 'Não informado') {\n    // Buscar padrão: número , espaço , número\n    const coordenadasMatch = latLongCompleto.match(/([-]?\\d+\\.?\\d*)\\s*,\\s*([-]?\\d+\\.?\\d*)/);\n    if (coordenadasMatch) {\n      latitude = coordenadasMatch[1].trim();\n      longitude = coordenadasMatch[2].trim();\n    }\n  }\n  return {\n    // Dados principais (primeira seção)\n    dadosLocalizacao1: {\n      municipio: municipio.trim(),\n      logradouro: logradouro.trim(),\n      bairro: bairro.trim(),\n      complemento: complemento.trim(),\n      tipoLocal: tipoLocal.trim()\n    },\n    // Dados detalhados (segunda seção)\n    dadosLocalizacao2: {\n      tipoVia: tipoVia.trim(),\n      numero: numero.trim(),\n      cep: cep.trim(),\n      pontoReferencia: pontoReferencia.trim(),\n      latitude,\n      longitude\n    }\n  };\n};\nconst organizarDadosPessoal = conteudo => {\n  // Separar a primeira linha (unidade) do resto\n  const linhas = conteudo.split(/[\\r\\n]/);\n  const primeiraLinha = linhas[0].replace(/\\s+/g, ' ').trim();\n\n  // Extrair todos os valores de cada categoria\n  const nomes = [];\n  const cargos = [];\n  const funcoes = [];\n  const matriculas = [];\n\n  // Usar regex para capturar todos os valores\n  const nomesMatch = conteudo.match(/Nome funcional:\\s*([^\\r\\n]+)/g);\n  if (nomesMatch) {\n    nomesMatch.forEach(match => {\n      const nome = match.replace('Nome funcional:', '').trim();\n      if (nome) nomes.push(nome);\n    });\n  }\n  const cargosMatch = conteudo.match(/Cargo:\\s*([^\\r\\n]+)/g);\n  if (cargosMatch) {\n    cargosMatch.forEach(match => {\n      const cargo = match.replace('Cargo:', '').trim();\n      if (cargo) cargos.push(cargo);\n    });\n  }\n  const funcoesMatch = conteudo.match(/Função:\\s*([^\\r\\n]+)/g);\n  if (funcoesMatch) {\n    funcoesMatch.forEach(match => {\n      const funcao = match.replace('Função:', '').trim();\n      if (funcao) funcoes.push(funcao);\n    });\n  }\n  const matriculasMatch = conteudo.match(/Matrícula:\\s*([^\\r\\n]+)/g);\n  if (matriculasMatch) {\n    matriculasMatch.forEach(match => {\n      const matricula = match.replace('Matrícula:', '').trim();\n      if (matricula) matriculas.push(matricula);\n    });\n  }\n\n  // Organizar por pessoa, uma informação embaixo da outra\n  let resultado = primeiraLinha;\n  const maxPessoas = Math.max(nomes.length, cargos.length, funcoes.length, matriculas.length);\n  for (let i = 0; i < maxPessoas; i++) {\n    if (nomes[i]) resultado += `\\nNome funcional: ${nomes[i]}`;\n    if (cargos[i]) resultado += `\\nCargo: ${cargos[i]}`;\n    if (funcoes[i]) resultado += `\\nFunção: ${funcoes[i]}`;\n    if (matriculas[i]) resultado += `\\nMatrícula: ${matriculas[i]}`;\n\n    // Adicionar linha em branco entre pessoas (se houver mais de uma)\n    if (i < maxPessoas - 1 && maxPessoas > 1) {\n      resultado += '\\n';\n    }\n  }\n  return resultado;\n};\nconst extrairEmpenhos = text => {\n  // Verificar se não há empenho\n  if (text.includes('Ocorrência Não Empenhada')) {\n    return {\n      vtr: 'Ocorrência Não Empenhada',\n      equipamentos: 'N/A',\n      despachado: 'Não informado',\n      deslocamento: 'Não informado',\n      chegadaLocal: 'Não informado',\n      liberado: 'Não informado'\n    };\n  }\n  const secaoEmpenhos = extractField(/Empenhos:?\\s+(.*?)(?=\\s*Dados)/s, text);\n  if (secaoEmpenhos === 'Não informado') {\n    return {\n      vtr: 'Nenhum empenho encontrado',\n      equipamentos: 'N/A',\n      despachado: 'N/A',\n      deslocamento: 'N/A',\n      chegadaLocal: 'N/A',\n      liberado: 'N/A'\n    };\n  }\n\n  // Extrair unidade (VTR/Ram/etc.) - capturar tudo entre início e \"Equipamento(s):\"\n  let vtr = 'N/A';\n\n  // Capturar todo o conteúdo antes de \"Equipamento(s):\"\n  const unidadeCompleta = secaoEmpenhos.match(/^([\\s\\S]*?)(?=Equipamento\\(s\\):)/m);\n  if (unidadeCompleta) {\n    const conteudo = unidadeCompleta[1].trim();\n\n    // Verificar se contém informações de pessoal (nomes funcionais, cargos, etc.)\n    if (conteudo.includes('Nome funcional:') || conteudo.includes('Cargo:') || conteudo.includes('Função:') || conteudo.includes('Matrícula:')) {\n      vtr = organizarDadosPessoal(conteudo);\n    } else {\n      // Caso normal - apenas primeira linha\n      const primeiraLinha = conteudo.split(/[\\r\\n]/)[0];\n      vtr = primeiraLinha.replace(/\\s+/g, ' ').trim();\n    }\n  }\n\n  // Extrair equipamentos - aceitar diferentes valores até o próximo campo\n  const equipMatch = secaoEmpenhos.match(/Equipamento\\(s\\):\\s*([^\\n\\r]+?)(?=\\s*Despachado|\\n\\s*Despachado|$)/i);\n  const equipamentos = equipMatch ? equipMatch[1].replace(/\\s+/g, ' ').trim() : 'N/A';\n\n  // Extrair tempos com regex mais precisas para evitar duplicação\n  const despachado = extractField(/Despachado:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n  const deslocamento = extractField(/Em\\s*Deslocamento:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n\n  // Para chegada no local - usar regex específica para data/hora\n  const chegadaLocal = extractField(/Chegada\\s*no\\s*Local:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n  const liberado = extractField(/Liberado:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n  return {\n    vtr: vtr,\n    equipamentos: equipamentos,\n    despachado: despachado,\n    deslocamento: deslocamento,\n    chegadaLocal: chegadaLocal,\n    liberado: liberado\n  };\n};\nconst extrairRelatos = text => {\n  // Verificar se existe a seção Relatos\n  if (!text.includes('Relatos')) {\n    return 'Nenhum relato adicional';\n  }\n  const textoRelato = extractField(/\"([^\"]+)\"/, text.substring(text.indexOf('Relatos')));\n  let resultado = '';\n  resultado += `\"${textoRelato.trim()}\"`;\n  return resultado;\n};","map":{"version":3,"names":["loadPDFJS","Promise","resolve","reject","window","pdfjsLib","script","document","createElement","src","onload","Error","onerror","head","appendChild","extractDataFromPDF","file","GlobalWorkerOptions","workerSrc","arrayBuffer","pdf","getDocument","promise","fullText","i","numPages","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","extractedData","parseOccurrenceData","error","message","formatDataForBackend","_extractedData$dadosL","_extractedData$dadosL2","_extractedData$dadosL3","_extractedData$dadosL4","_extractedData$dadosL5","backendData","numeroOcorrencia","natureza","naturezaInicial","narrativas","localizacao","logradouro","dadosLocalizacao1","bairro","pontoReferencia","dadosLocalizacao2","lat","latitude","long","longitude","empenhos","relatos","vtr","empenhoData","equipamentos","despachado","deslocamento","chegadaLocal","liberado","push","saveDataToBackend","salvarOcorrencia","formattedData","result","generateNewPDF","data","_data$dadosLocalizaca","_data$dadosLocalizaca2","_data$dadosLocalizaca3","_data$dadosLocalizaca4","_data$dadosLocalizaca5","_data$dadosLocalizaca6","_data$dadosLocalizaca7","_data$dadosLocalizaca8","_data$dadosLocalizaca9","_data$dadosLocalizaca0","_data$dadosLocalizaca1","_data$empenhos","_data$empenhos2","_data$empenhos3","_data$empenhos4","_data$empenhos5","_data$empenhos6","htmlContent","dataHora","municipio","complemento","tipoLocal","tipoVia","numero","cep","Date","toLocaleString","blob","Blob","type","url","URL","createObjectURL","link","href","timestamp","toISOString","replace","download","body","click","removeChild","revokeObjectURL","text","dadosLocalizacaoExtraidos","extrairDadosLocalizacao","extrairNumeroOcorrencia","extrairDadosGerais","extrairNarrativas","extrairEmpenhos","extrairRelatos","extractField","pattern","defaultValue","match","trim","regexCompleto","matchCompleto","regexAlternativo","matchAlternativo","endsWith","posicao","indexOf","textoApos","substring","length","matchResto","padraoEspecifico","padraoGenerico","descricaoNarrativa","latLongCompleto","coordenadasMatch","organizarDadosPessoal","conteudo","linhas","split","primeiraLinha","nomes","cargos","funcoes","matriculas","nomesMatch","forEach","nome","cargosMatch","cargo","funcoesMatch","funcao","matriculasMatch","matricula","resultado","maxPessoas","Math","max","includes","secaoEmpenhos","unidadeCompleta","equipMatch","textoRelato"],"sources":["/Users/lohuamalima/Desktop/sttp/ocorrencias-de-transito/src/utils/pdfUtils.js"],"sourcesContent":["// Funções para manipulação e processamento de PDF\n\nexport const loadPDFJS = () => {\n    return new Promise((resolve, reject) => {\n        if (window.pdfjsLib) {\n            resolve();\n            return;\n        }\n\n        const script = document.createElement('script');\n        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';\n        script.onload = () => {\n            if (window.pdfjsLib) {\n                resolve();\n            } else {\n                reject(new Error('Falha ao carregar PDF.js'));\n            }\n        };\n        script.onerror = () => reject(new Error('Erro ao carregar PDF.js'));\n        document.head.appendChild(script);\n    });\n};\n\nexport const extractDataFromPDF = async (file) => {\n    try {\n        // Carregar PDF.js via script tag\n        if (!window.pdfjsLib) {\n            await loadPDFJS();\n        }\n\n        // Configurar worker\n        window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n\n        // Converter arquivo para ArrayBuffer\n        const arrayBuffer = await file.arrayBuffer();\n\n        // Carregar PDF\n        const pdf = await window.pdfjsLib.getDocument(arrayBuffer).promise;\n\n        let fullText = '';\n\n        // Extrair texto de todas as páginas\n        for (let i = 1; i <= pdf.numPages; i++) {\n            const page = await pdf.getPage(i);\n            const textContent = await page.getTextContent();\n            const pageText = textContent.items.map(item => item.str).join(' ');\n            fullText += pageText + '\\n';\n        }\n\n        // Processar texto extraído usando regex e parsing manual\n        const extractedData = parseOccurrenceData(fullText);\n\n        return extractedData;\n    } catch (error) {\n        throw new Error('Falha ao processar o PDF: ' + error.message);\n    }\n};\n\n// Função para transformar dados extraídos no formato esperado pelo backend\nexport const formatDataForBackend = (extractedData) => {\n    const backendData = {\n        numeroOcorrencia: extractedData.numeroOcorrencia || '',\n        natureza: extractedData.naturezaInicial || '',\n        narrativas: extractedData.narrativas || '',\n        localizacao: {\n            logradouro: extractedData.dadosLocalizacao1?.logradouro || '',\n            bairro: extractedData.dadosLocalizacao1?.bairro || '',\n            pontoReferencia: extractedData.dadosLocalizacao2?.pontoReferencia || '',\n            lat: extractedData.dadosLocalizacao2?.latitude || '',\n            long: extractedData.dadosLocalizacao2?.longitude || ''\n        },\n        empenhos: [],\n        relatos: ''\n    };\n\n    // Processar empenhos se existirem dados\n    if (extractedData.empenhos && extractedData.empenhos.vtr !== 'Ocorrência Não Empenhada') {\n        const empenhoData = {\n            vtr: extractedData.empenhos.vtr || '',\n            equipamentos: extractedData.empenhos.equipamentos || '',\n            despachado: extractedData.empenhos.despachado || '',\n            deslocamento: extractedData.empenhos.deslocamento || '',\n            chegadaLocal: extractedData.empenhos.chegadaLocal || '',\n            liberado: extractedData.empenhos.liberado || ''\n        };\n        backendData.empenhos.push(empenhoData);\n    }\n\n    // Processar relatos - agora como string simples\n    if (extractedData.relatos && extractedData.relatos !== 'Nenhum relato adicional') {\n        backendData.relatos = extractedData.relatos;\n    }\n\n    return backendData;\n};\n\nexport const saveDataToBackend = async (extractedData) => {\n    try {\n        // Importar o service dinamicamente para evitar problemas de dependência circular\n        const { salvarOcorrencia } = await import('../service/UserService');\n        \n        // Transformar dados para o formato esperado pelo backend\n        const formattedData = formatDataForBackend(extractedData);\n        \n        // Log para debug - mostrar como ficou o JSON\n\n        // Usar o service para manter a padronização e incluir o token automaticamente\n        const result = await salvarOcorrencia(formattedData);\n        \n        // Log da resposta do backend\n        \n        return result;\n    } catch (error) {\n        throw new Error('Falha ao salvar dados no sistema: ' + error.message);\n    }\n};\n\nexport const generateNewPDF = async (data) => {\n    try {\n        const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Relatório de Ocorrência</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 20px;\n            font-size: 12px;\n            line-height: 1.4;\n        }\n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            border-bottom: 2px solid #333;\n            padding-bottom: 15px;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 18px;\n            color: #333;\n        }\n        .header p {\n            margin: 5px 0;\n            color: #666;\n        }\n        .section {\n            margin-bottom: 20px;\n            page-break-inside: avoid;\n        }\n        .section-title {\n            background-color: #f0f0f0;\n            padding: 8px 12px;\n            font-weight: bold;\n            border-left: 4px solid #2563eb;\n            margin-bottom: 10px;\n        }\n        .field-group {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin-bottom: 10px;\n        }\n        .field {\n            flex: 1;\n            min-width: 200px;\n        }\n        .field-label {\n            font-weight: bold;\n            color: #333;\n        }\n        .field-value {\n            color: #555;\n            margin-top: 2px;\n        }\n        .full-width {\n            width: 100%;\n        }\n        .footer {\n            margin-top: 40px;\n            text-align: center;\n            font-size: 10px;\n            color: #888;\n            border-top: 1px solid #ddd;\n            padding-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Central de Atendimento e Despacho</h1>\n        <p>Superintendência de Trânsito e Transportes Públicos</p>\n        <p>Relatório de Ocorrência Reorganizado</p>\n        <p><strong>Ocorrência N°:</strong> ${data.numeroOcorrencia || 'Não informado'}</p>\n        <p><strong>Data/Hora:</strong> ${data.dataHora || 'Não informado'}</p>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">1. NATUREZA INICIAL</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Natureza:</div>\n            <div class=\"field-value\">${data.naturezaInicial || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">2. NARRATIVAS</div>\n        <div class=\"field full-width\">\n            <div class=\"field-label\">Descrição:</div>\n            <div class=\"field-value\">${data.narrativas || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">3. DADOS DA LOCALIZAÇÃO (PRINCIPAL)</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Município:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao1?.municipio || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Logradouro:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao1?.logradouro || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Bairro:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao1?.bairro || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Complemento:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao1?.complemento || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field\">\n            <div class=\"field-label\">Tipo de Local:</div>\n            <div class=\"field-value\">${data.dadosLocalizacao1?.tipoLocal || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">4. DADOS DA LOCALIZAÇÃO (DETALHES)</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Tipo de Via:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.tipoVia || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Número:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.numero || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">CEP:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.cep || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Ponto de Referência:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.pontoReferencia || 'Não informado'}</div>\n            </div>\n        </div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">Latitude:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.latitude || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Longitude:</div>\n                <div class=\"field-value\">${data.dadosLocalizacao2?.longitude || 'Não informado'}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">5. EMPENHOS - VTR E EQUIPAMENTOS</div>\n        <div class=\"field-group\">\n            <div class=\"field\">\n                <div class=\"field-label\">VTR:</div>\n                <div class=\"field-value\">${data.empenhos?.vtr || 'Não informado'}</div>\n            </div>\n            <div class=\"field\">\n                <div class=\"field-label\">Equipamentos:</div>\n                <div class=\"field-value\">${data.empenhos?.equipamentos || 'Não informado'}</div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">6. EMPENHO - DESPACHADO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Despacho:</div>\n            <div class=\"field-value\">${data.empenhos?.despachado || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">7. EMPENHOS - EM DESLOCAMENTO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Status:</div>\n            <div class=\"field-value\">${data.empenhos?.deslocamento || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">8. EMPENHOS - CHEGADA NO LOCAL</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Chegada:</div>\n            <div class=\"field-value\">${data.empenhos?.chegadaLocal || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">9. EMPENHOS - LIBERADO</div>\n        <div class=\"field\">\n            <div class=\"field-label\">Data/Hora Liberação:</div>\n            <div class=\"field-value\">${data.empenhos?.liberado || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <div class=\"section-title\">10. RELATOS</div>\n        <div class=\"field full-width\">\n            <div class=\"field-label\">Relatos Adicionais:</div>\n            <div class=\"field-value\">${data.relatos || 'Não informado'}</div>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <p>Relatório gerado automaticamente em ${new Date().toLocaleString('pt-BR')}</p>\n        <p>STTP - Sistema de Processamento de Ocorrências</p>\n    </div>\n</body>\n</html>`;\n\n        // Criar blob do HTML\n        const blob = new Blob([htmlContent], { type: 'text/html' });\n        const url = URL.createObjectURL(blob);\n\n        // Criar link para download\n        const link = document.createElement('a');\n        link.href = url;\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        link.download = `relatorio_ocorrencia_${timestamp}.html`;\n\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n\n        return true;\n    } catch (error) {\n        throw new Error('Falha ao gerar relatório');\n    }\n};\n\nexport const parseOccurrenceData = (text) => {\n    \n    const dadosLocalizacaoExtraidos = extrairDadosLocalizacao(text);\n    \n    const result = {\n        numeroOcorrencia: extrairNumeroOcorrencia(text),\n        naturezaInicial: extrairDadosGerais(text),\n        narrativas: extrairNarrativas(text),\n        dadosLocalizacao1: dadosLocalizacaoExtraidos.dadosLocalizacao1,\n        dadosLocalizacao2: dadosLocalizacaoExtraidos.dadosLocalizacao2,\n        empenhos: extrairEmpenhos(text),\n        relatos: extrairRelatos(text)\n    };\n\n    return result;\n};\n\n// Função auxiliar para extração\nconst extractField = (pattern, text, defaultValue = 'Não informado') => {\n    const match = text.match(pattern);\n    return match ? match[1].trim() : defaultValue;\n};\n\n// Funções específicas para cada seção\nconst extrairNumeroOcorrencia = (text) => {\n    // *** EXTRAIR NÚMERO DA OCORRÊNCIA *** \\\\\n    let numeroOcorrencia = 'Não informado';\n    const regexCompleto = /Ocorrência\\s*N°:\\s*([A-Z0-9-]+(?:\\s*[A-Z-]+)*)/;\n    const matchCompleto = text.match(regexCompleto);\n\n    if (matchCompleto) {\n        numeroOcorrencia = matchCompleto[1].replace(/\\s+/g, '');\n    } else {\n        const regexAlternativo = /N°:\\s*([A-Z0-9-]+(?:\\s+[A-Z-]+)*?)(?=\\s*[A-Z][a-z]|\\s*Data|$)/;\n        const matchAlternativo = text.match(regexAlternativo);\n\n        if (matchAlternativo) {\n            numeroOcorrencia = matchAlternativo[1].replace(/\\s+/g, '');\n        }\n    }\n    \n    if (numeroOcorrencia.endsWith('-')) {\n        const posicao = text.indexOf(numeroOcorrencia);\n        if (posicao !== -1) {\n            const textoApos = text.substring(posicao + numeroOcorrencia.length, posicao + numeroOcorrencia.length + 20);\n            const matchResto = textoApos.match(/^([A-Z-]+)/);\n            if (matchResto) {\n                numeroOcorrencia += matchResto[1];\n            }\n        }\n    }\n\n    const padraoEspecifico = numeroOcorrencia.match(/^(CIMOB\\d+-\\d+-[A-Z]+-[A-Z]{3})/);\n    if (padraoEspecifico) {\n        numeroOcorrencia = padraoEspecifico[1];\n    } else {\n        const padraoGenerico = numeroOcorrencia.match(/^([A-Z]+\\d+-\\d+-[A-Z]+-[A-Z]{3})/);\n        if (padraoGenerico) {\n            numeroOcorrencia = padraoGenerico[1];\n        }\n    }\n    \n    return numeroOcorrencia; // ← ADICIONE ESTE RETURN\n};\n\nconst extrairDadosGerais = (text) => {\n    // Usar lookahead mais específico ao invés de [^P]\n    const naturezaInicial = extractField(/Natureza\\s*Inicial:\\s*(.*?)(?=\\s*Prioridade\\s*:)/, text);\n\n    return naturezaInicial.trim();\n};\n\nconst extrairNarrativas = (text) => {\n    const descricaoNarrativa = extractField(/\"([^\"]+)\"/, text);\n    \n    return `\"${descricaoNarrativa.trim()}\"`; \n};\n\nconst extrairDadosLocalizacao = (text) => {\n    // Primeira coluna\n    let municipio = extractField(/Município\\/UF:\\s*([^L]+?)(?=\\s*Logradouro:)/, text);\n    \n    if (municipio === 'Não informado') {\n        municipio = extractField(/Município[^:]*:\\s*([^L]+)(?=Logradouro)/i, text);\n    }\n    \n    // Melhorar extração do logradouro - tentar vários padrões\n    let logradouro = extractField(/Logradouro:\\s*([^B]+?)(?=\\s*Bairro:)/, text);\n    if (logradouro === 'Não informado') {\n        // Tentar padrão alternativo sem lookahead específico\n        logradouro = extractField(/Logradouro:\\s*([^\\n\\r]+)/, text);\n        if (logradouro !== 'Não informado') {\n            // Limpar possível texto que pode vir junto\n            logradouro = logradouro.replace(/\\s*Bairro:.*$/, '').trim();\n        }\n    }\n    \n    let bairro = extractField(/Bairro:\\s*([^C]+?)(?=\\s*Complemento)/, text);\n    if (bairro === 'Não informado') {\n        bairro = extractField(/Bairro[^:]*:\\s*([^L]+)(?=Complemento)/i, text);\n    }\n    \n    let complemento = extractField(/Complemento:\\s*([^T]+?)(?=\\s*Tipo\\s*de\\s*Local:)/, text);\n    if (complemento === 'Não informado') {\n        complemento = extractField(/Complemento[^:]*:\\s*([^L]+)(?=Local)/i, text);\n    }\n    const tipoLocal = extractField(/Tipo\\s*de\\s*Local:\\s*([^T]+?)(?=\\s*Tipo\\s*de\\s*Via:)/, text);\n\n    // Segunda coluna\n    const tipoVia = extractField(/Tipo\\s*de\\s*Via:\\s*([^N]+?)(?=\\s*Número:)/, text);\n    const numero = extractField(/Número:\\s*([^C]+?)(?=\\s*CEP:)/, text);\n    const cep = extractField(/CEP:\\s*([^P]+?)(?=\\s*Ponto\\s*de\\s*Referência:)/, text);\n    const pontoReferencia = extractField(/Ponto\\s*de\\s*Referência:\\s*([^\\r\\n]+?)(?=\\s*Lat\\s*\\/\\s*Long:)/, text);\n    \n    // Extrair Lat/Long com formato específico: -7.220458900000001 , -7.220458900000001\n    const latLongCompleto = extractField(/Lat\\s*\\/\\s*Long:\\s*([^N]+?)(?=\\s*Narrativas)/, text);\n    \n    // Separar latitude e longitude\n    let latitude = 'Não informado';\n    let longitude = 'Não informado';\n    \n    if (latLongCompleto !== 'Não informado') {\n        // Buscar padrão: número , espaço , número\n        const coordenadasMatch = latLongCompleto.match(/([-]?\\d+\\.?\\d*)\\s*,\\s*([-]?\\d+\\.?\\d*)/);\n        if (coordenadasMatch) {\n            latitude = coordenadasMatch[1].trim();\n            longitude = coordenadasMatch[2].trim();\n        }\n    }\n\n    return {\n        // Dados principais (primeira seção)\n        dadosLocalizacao1: {\n            municipio: municipio.trim(),\n            logradouro: logradouro.trim(),\n            bairro: bairro.trim(),\n            complemento: complemento.trim(),\n            tipoLocal: tipoLocal.trim()\n        },\n        // Dados detalhados (segunda seção)\n        dadosLocalizacao2: {\n            tipoVia: tipoVia.trim(),\n            numero: numero.trim(),\n            cep: cep.trim(),\n            pontoReferencia: pontoReferencia.trim(),\n            latitude,\n            longitude\n        }\n    };\n};\n\nconst organizarDadosPessoal = (conteudo) => {\n    // Separar a primeira linha (unidade) do resto\n    const linhas = conteudo.split(/[\\r\\n]/);\n    const primeiraLinha = linhas[0].replace(/\\s+/g, ' ').trim();\n    \n    // Extrair todos os valores de cada categoria\n    const nomes = [];\n    const cargos = [];\n    const funcoes = [];\n    const matriculas = [];\n    \n    // Usar regex para capturar todos os valores\n    const nomesMatch = conteudo.match(/Nome funcional:\\s*([^\\r\\n]+)/g);\n    if (nomesMatch) {\n        nomesMatch.forEach(match => {\n            const nome = match.replace('Nome funcional:', '').trim();\n            if (nome) nomes.push(nome);\n        });\n    }\n    \n    const cargosMatch = conteudo.match(/Cargo:\\s*([^\\r\\n]+)/g);\n    if (cargosMatch) {\n        cargosMatch.forEach(match => {\n            const cargo = match.replace('Cargo:', '').trim();\n            if (cargo) cargos.push(cargo);\n        });\n    }\n    \n    const funcoesMatch = conteudo.match(/Função:\\s*([^\\r\\n]+)/g);\n    if (funcoesMatch) {\n        funcoesMatch.forEach(match => {\n            const funcao = match.replace('Função:', '').trim();\n            if (funcao) funcoes.push(funcao);\n        });\n    }\n    \n    const matriculasMatch = conteudo.match(/Matrícula:\\s*([^\\r\\n]+)/g);\n    if (matriculasMatch) {\n        matriculasMatch.forEach(match => {\n            const matricula = match.replace('Matrícula:', '').trim();\n            if (matricula) matriculas.push(matricula);\n        });\n    }\n    \n    // Organizar por pessoa, uma informação embaixo da outra\n    let resultado = primeiraLinha;\n    const maxPessoas = Math.max(nomes.length, cargos.length, funcoes.length, matriculas.length);\n    \n    for (let i = 0; i < maxPessoas; i++) {\n        if (nomes[i]) resultado += `\\nNome funcional: ${nomes[i]}`;\n        if (cargos[i]) resultado += `\\nCargo: ${cargos[i]}`;\n        if (funcoes[i]) resultado += `\\nFunção: ${funcoes[i]}`;\n        if (matriculas[i]) resultado += `\\nMatrícula: ${matriculas[i]}`;\n        \n        // Adicionar linha em branco entre pessoas (se houver mais de uma)\n        if (i < maxPessoas - 1 && maxPessoas > 1) {\n            resultado += '\\n';\n        }\n    }\n    \n    return resultado;\n};\n\nconst extrairEmpenhos = (text) => {\n    // Verificar se não há empenho\n    if (text.includes('Ocorrência Não Empenhada')) {\n        return {\n            vtr: 'Ocorrência Não Empenhada',\n            equipamentos: 'N/A',\n            despachado: 'Não informado',\n            deslocamento: 'Não informado',\n            chegadaLocal: 'Não informado',\n            liberado: 'Não informado'\n        };\n    }\n\n    const secaoEmpenhos = extractField(/Empenhos:?\\s+(.*?)(?=\\s*Dados)/s, text);\n    \n    if (secaoEmpenhos === 'Não informado') {\n        return {\n            vtr: 'Nenhum empenho encontrado',\n            equipamentos: 'N/A',\n            despachado: 'N/A',\n            deslocamento: 'N/A',\n            chegadaLocal: 'N/A',\n            liberado: 'N/A'\n        };\n    }\n\n    // Extrair unidade (VTR/Ram/etc.) - capturar tudo entre início e \"Equipamento(s):\"\n    let vtr = 'N/A';\n    \n    // Capturar todo o conteúdo antes de \"Equipamento(s):\"\n    const unidadeCompleta = secaoEmpenhos.match(/^([\\s\\S]*?)(?=Equipamento\\(s\\):)/m);\n    if (unidadeCompleta) {\n        const conteudo = unidadeCompleta[1].trim();\n        \n        // Verificar se contém informações de pessoal (nomes funcionais, cargos, etc.)\n        if (conteudo.includes('Nome funcional:') || conteudo.includes('Cargo:') || conteudo.includes('Função:') || conteudo.includes('Matrícula:')) {\n            vtr = organizarDadosPessoal(conteudo);\n        } else {\n            // Caso normal - apenas primeira linha\n            const primeiraLinha = conteudo.split(/[\\r\\n]/)[0];\n            vtr = primeiraLinha.replace(/\\s+/g, ' ').trim();\n        }\n    }\n    \n    // Extrair equipamentos - aceitar diferentes valores até o próximo campo\n    const equipMatch = secaoEmpenhos.match(/Equipamento\\(s\\):\\s*([^\\n\\r]+?)(?=\\s*Despachado|\\n\\s*Despachado|$)/i);\n    const equipamentos = equipMatch ? equipMatch[1].replace(/\\s+/g, ' ').trim() : 'N/A';\n    \n    // Extrair tempos com regex mais precisas para evitar duplicação\n    const despachado = extractField(/Despachado:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n    \n    const deslocamento = extractField(/Em\\s*Deslocamento:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n    \n    // Para chegada no local - usar regex específica para data/hora\n    const chegadaLocal = extractField(/Chegada\\s*no\\s*Local:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n    \n    const liberado = extractField(/Liberado:\\s*(\\d{2}\\/\\d{2}\\/\\d{4}\\s*às\\s*\\d{2}:\\d{2})/, secaoEmpenhos) || 'N/A';\n    \n    return {\n        vtr: vtr,\n        equipamentos: equipamentos,\n        despachado: despachado,\n        deslocamento: deslocamento, \n        chegadaLocal: chegadaLocal,\n        liberado: liberado\n    };\n};\n\nconst extrairRelatos = (text) => {\n    // Verificar se existe a seção Relatos\n    if (!text.includes('Relatos')) {\n        return 'Nenhum relato adicional';\n    }\n    \n    const textoRelato = extractField(/\"([^\"]+)\"/, text.substring(text.indexOf('Relatos')));\n    \n    let resultado = '';\n    \n  \n    \n    resultado += `\"${textoRelato.trim()}\"`;\n    \n    return resultado;\n};"],"mappings":"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,eAAA,EAAAC,eAAA,EAAAC,eAAA;IACA,MAAMC,WAAW,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6ClB,IAAI,CAAC7B,gBAAgB,IAAI,eAAe;AACrF,yCAAyC6B,IAAI,CAACmB,QAAQ,IAAI,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuCnB,IAAI,CAAC3B,eAAe,IAAI,eAAe;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC2B,IAAI,CAAC1B,UAAU,IAAI,eAAe;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAA2B,qBAAA,GAAAD,IAAI,CAACvB,iBAAiB,cAAAwB,qBAAA,uBAAtBA,qBAAA,CAAwBmB,SAAS,KAAI,eAAe;AAC/F;AACA;AACA;AACA,2CAA2C,EAAAlB,sBAAA,GAAAF,IAAI,CAACvB,iBAAiB,cAAAyB,sBAAA,uBAAtBA,sBAAA,CAAwB1B,UAAU,KAAI,eAAe;AAChG;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAA2B,sBAAA,GAAAH,IAAI,CAACvB,iBAAiB,cAAA0B,sBAAA,uBAAtBA,sBAAA,CAAwBzB,MAAM,KAAI,eAAe;AAC5F;AACA;AACA;AACA,2CAA2C,EAAA0B,sBAAA,GAAAJ,IAAI,CAACvB,iBAAiB,cAAA2B,sBAAA,uBAAtBA,sBAAA,CAAwBiB,WAAW,KAAI,eAAe;AACjG;AACA;AACA;AACA;AACA,uCAAuC,EAAAhB,sB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}