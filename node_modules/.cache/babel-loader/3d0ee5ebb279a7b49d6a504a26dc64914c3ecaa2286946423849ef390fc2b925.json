{"ast":null,"code":"import * as HttpService from '../HttpService';\n\n// auth \nexport const login = async body => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.post('/auth/signin', body);\n    if (status === 200 || status === 201) {\n      localStorage.setItem(\"nome\", data.nome);\n      localStorage.setItem(\"email\", data.email || \"\");\n      localStorage.setItem(\"cpf\", data.cpf);\n      if (data.id) {\n        localStorage.setItem(\"userId\", data.id);\n      }\n      if (data.access_token) {\n        localStorage.setItem(\"access_token\", data.access_token);\n        localStorage.setItem(\"loginTime\", new Date().getTime().toString());\n      }\n      if (data.tipoUser) {\n        localStorage.setItem(\"acesso\", data.tipoUser);\n      }\n    } else {\n      throw new Error('Falha na autenticação');\n    }\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2;\n    const customError = new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Erro ao fazer login');\n    customError.status = (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status;\n    throw customError;\n  }\n};\nexport const esqueciSenha = async cpf => {\n  try {\n    const body = {\n      cpf\n    };\n    const {\n      data,\n      status\n    } = await HttpService.postWithoutAuth('/auth/esqueci-a-senha', body);\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha na solicitação de recuperação');\n    }\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'Erro ao solicitar recuperação de senha');\n  }\n};\nexport const redefinirSenha = async (resetCode, newPassword) => {\n  try {\n    const body = {\n      resetCode,\n      newPassword\n    };\n    const {\n      data,\n      status\n    } = await HttpService.postWithoutAuth('/auth/redefinir-senha', body);\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha na redefinição de senha');\n    }\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Erro ao redefinir senha');\n  }\n};\nexport const cadastro = async userData => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.post('/auth/cadastro', userData);\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha no cadastro');\n    }\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Erro ao cadastrar usuário');\n  }\n};\nexport const buscarUsuarios = async () => {\n  try {\n    const data = await HttpService.get('/user');\n    return data;\n  } catch (error) {\n    throw new Error(error.message || 'Erro ao carregar usuários');\n  }\n};\nexport const alterarTipoUsuario = async (userId, isAdmin) => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.put(`/user/admin/${userId}`, {\n      isAdmin\n    });\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha ao alterar tipo de usuário');\n    }\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Erro ao alterar tipo de usuário');\n  }\n};\nexport const alterarStatusUsuario = async (userId, ativo) => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.put(`/user/status/${userId}`, {\n      ativo\n    });\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha ao alterar status do usuário');\n    }\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Erro ao alterar status do usuário');\n  }\n};\n\n// Ocorrências\nexport const salvarOcorrencia = async ocorrenciaData => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.post('/ocorrencias', ocorrenciaData);\n    if (status === 200 || status === 201) {\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha ao salvar ocorrência');\n    }\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Erro ao salvar ocorrência');\n  }\n};\nexport const buscarEstatisticas = async () => {\n  try {\n    const data = await HttpService.get('/ocorrencias/statistics');\n    return data;\n  } catch (error) {\n    throw new Error(error.message || 'Erro ao carregar estatísticas');\n  }\n};\nexport const buscarEstatisticasMensais = async (ano, mes) => {\n  try {\n    const body = {\n      ano,\n      mes\n    };\n    const {\n      data\n    } = await HttpService.post('/ocorrencias/statistics/monthly', body);\n    return data;\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || error.message || 'Erro ao carregar estatísticas mensais');\n  }\n};\n\n// usuário\nexport const buscarPerfilUsuario = async userId => {\n  try {\n    const data = await HttpService.get(`/auth/user/${userId}`);\n    return data;\n  } catch (error) {\n    var _error$response0, _error$response0$data;\n    throw new Error(((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || error.message || 'Erro ao carregar perfil do usuário');\n  }\n};\nexport const atualizarPerfilUsuario = async camposAlterados => {\n  try {\n    const {\n      data,\n      status\n    } = await HttpService.put('/auth/me', camposAlterados);\n    if (status === 200 || status === 201) {\n      if (camposAlterados.nome) {\n        localStorage.setItem(\"nome\", camposAlterados.nome);\n      }\n      if (camposAlterados.email) {\n        localStorage.setItem(\"email\", camposAlterados.email);\n      }\n      return {\n        data,\n        status\n      };\n    } else {\n      throw new Error('Falha ao atualizar perfil');\n    }\n  } catch (error) {\n    var _error$response1, _error$response1$data;\n    throw new Error(((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.message) || error.message || 'Erro ao atualizar perfil do usuário');\n  }\n};\nexport const buscarOcorrenciasFiltradas = async (filtros = {}) => {\n  try {\n    const body = {};\n    if (filtros.dataInicial) {\n      const [ano, mes, dia] = filtros.dataInicial.split('-');\n      body.dataInicial = `${dia}/${mes}/${ano}`;\n    }\n    if (filtros.dataFinal) {\n      const [ano, mes, dia] = filtros.dataFinal.split('-');\n      body.dataFinal = `${dia}/${mes}/${ano}`;\n    }\n    if (filtros.natureza) {\n      body.natureza = filtros.natureza;\n    }\n    if (filtros.logradouro) {\n      body.logradouro = filtros.logradouro;\n    }\n    if (filtros.bairro) {\n      body.bairro = filtros.bairro;\n    }\n    const {\n      data\n    } = await HttpService.post('/ocorrencias/filtro', body);\n    const dadosProcessados = data.map(ocorrencia => {\n      var _ocorrencia$natureza, _ocorrencia$empenhos, _ocorrencia$empenhos$, _ocorrencia$localizac, _ocorrencia$localizac2;\n      return {\n        id: ocorrencia.id,\n        numeroOcorrencia: ocorrencia.numeroOcorrencia,\n        natureza: ((_ocorrencia$natureza = ocorrencia.natureza) === null || _ocorrencia$natureza === void 0 ? void 0 : _ocorrencia$natureza.replace(/\\s+/g, ' ').trim()) || 'Não informado',\n        createdAt: ocorrencia.createdAt,\n        dataDespacho: ((_ocorrencia$empenhos = ocorrencia.empenhos) === null || _ocorrencia$empenhos === void 0 ? void 0 : (_ocorrencia$empenhos$ = _ocorrencia$empenhos[0]) === null || _ocorrencia$empenhos$ === void 0 ? void 0 : _ocorrencia$empenhos$.despachado) || null,\n        localizacao: {\n          bairro: ((_ocorrencia$localizac = ocorrencia.localizacao) === null || _ocorrencia$localizac === void 0 ? void 0 : (_ocorrencia$localizac2 = _ocorrencia$localizac.bairro) === null || _ocorrencia$localizac2 === void 0 ? void 0 : _ocorrencia$localizac2.replace(/^:\\s*/, '').replace(/\\s+/g, ' ').trim()) || 'Não informado'\n        },\n        empenhos: ocorrencia.empenhos\n      };\n    });\n    return dadosProcessados;\n  } catch (error) {\n    var _error$response10, _error$response12, _error$response12$dat;\n    if (((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.status) === 404) {\n      var _error$response11, _error$response11$dat;\n      const errorMessage = ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.message) || '';\n      if (errorMessage.includes('index.html') || errorMessage.includes('uploads')) {\n        throw new Error('Erro no backend: O servidor está tentando servir arquivos estáticos em vez da API. Verifique a configuração das rotas no backend.');\n      }\n      throw new Error('Endpoint /ocorrencias/filtro não encontrado. Verifique se o backend está rodando corretamente.');\n    }\n    throw new Error(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.message) || error.message || 'Erro ao carregar ocorrências');\n  }\n};\nexport const buscarOcorrenciaPorId = async id => {\n  try {\n    const data = await HttpService.get(`/ocorrencias/${id}`);\n    return data;\n  } catch (error) {\n    var _error$response13, _error$response14, _error$response14$dat;\n    if (((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.status) === 404) {\n      throw new Error('Ocorrência não encontrada. Verifique se o ID está correto.');\n    }\n    throw new Error(((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.message) || error.message || 'Erro ao carregar detalhes da ocorrência');\n  }\n};","map":{"version":3,"names":["HttpService","login","body","data","status","post","localStorage","setItem","nome","email","cpf","id","access_token","Date","getTime","toString","tipoUser","Error","error","_error$response","_error$response$data","_error$response2","customError","response","message","esqueciSenha","postWithoutAuth","_error$response3","_error$response3$data","redefinirSenha","resetCode","newPassword","_error$response4","_error$response4$data","cadastro","userData","_error$response5","_error$response5$data","buscarUsuarios","get","alterarTipoUsuario","userId","isAdmin","put","_error$response6","_error$response6$data","alterarStatusUsuario","ativo","_error$response7","_error$response7$data","salvarOcorrencia","ocorrenciaData","_error$response8","_error$response8$data","buscarEstatisticas","buscarEstatisticasMensais","ano","mes","_error$response9","_error$response9$data","buscarPerfilUsuario","_error$response0","_error$response0$data","atualizarPerfilUsuario","camposAlterados","_error$response1","_error$response1$data","buscarOcorrenciasFiltradas","filtros","dataInicial","dia","split","dataFinal","natureza","logradouro","bairro","dadosProcessados","map","ocorrencia","_ocorrencia$natureza","_ocorrencia$empenhos","_ocorrencia$empenhos$","_ocorrencia$localizac","_ocorrencia$localizac2","numeroOcorrencia","replace","trim","createdAt","dataDespacho","empenhos","despachado","localizacao","_error$response10","_error$response12","_error$response12$dat","_error$response11","_error$response11$dat","errorMessage","includes","buscarOcorrenciaPorId","_error$response13","_error$response14","_error$response14$dat"],"sources":["/Users/lohuamalima/Desktop/sttp/ocorrencias-de-transito/src/service/UserService/index.js"],"sourcesContent":["import * as HttpService from '../HttpService';\n\n\n// auth \nexport const login = async (body) => {\n    try {\n      const { data, status } = await HttpService.post('/auth/signin', body);\n  \n      if (status === 200 || status === 201) {\n        localStorage.setItem(\"nome\", data.nome);\n        localStorage.setItem(\"email\", data.email || \"\");\n        localStorage.setItem(\"cpf\", data.cpf);\n        if (data.id) {\n          localStorage.setItem(\"userId\", data.id);\n        }\n        if (data.access_token) {\n          localStorage.setItem(\"access_token\", data.access_token);\n          localStorage.setItem(\"loginTime\", new Date().getTime().toString());\n        }\n        if (data.tipoUser) {\n          localStorage.setItem(\"acesso\", data.tipoUser);\n        }\n      } else {\n        throw new Error('Falha na autenticação');\n      }\n  \n      return { data, status };\n    } catch (error) {\n      const customError = new Error(error.response?.data?.message || 'Erro ao fazer login');\n      customError.status = error.response?.status;\n      throw customError;\n    }\n  }\nexport const esqueciSenha = async (cpf) => {\n    try {\n        const body = { cpf };\n        const { data, status } = await HttpService.postWithoutAuth('/auth/esqueci-a-senha', body);\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha na solicitação de recuperação');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || error.message || 'Erro ao solicitar recuperação de senha');\n    }\n}\nexport const redefinirSenha = async (resetCode, newPassword) => {\n    try {\n        const body = { resetCode, newPassword };\n        const { data, status } = await HttpService.postWithoutAuth('/auth/redefinir-senha', body);\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha na redefinição de senha');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Erro ao redefinir senha');\n    }\n}\nexport const cadastro = async (userData) => {\n    try {\n        const { data, status } = await HttpService.post('/auth/cadastro', userData);\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha no cadastro');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Erro ao cadastrar usuário');\n    }\n};\nexport const buscarUsuarios = async () => {\n    try {\n        const data = await HttpService.get('/user');\n        return data;\n    } catch (error) {\n        throw new Error(error.message || 'Erro ao carregar usuários');\n    }\n};\nexport const alterarTipoUsuario = async (userId, isAdmin) => {\n    try {\n        const { data, status } = await HttpService.put(`/user/admin/${userId}`, { isAdmin });\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha ao alterar tipo de usuário');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Erro ao alterar tipo de usuário');\n    }\n};\nexport const alterarStatusUsuario = async (userId, ativo) => {\n    try {\n        const { data, status } = await HttpService.put(`/user/status/${userId}`, { ativo });\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha ao alterar status do usuário');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Erro ao alterar status do usuário');\n    }\n};\n\n// Ocorrências\nexport const salvarOcorrencia = async (ocorrenciaData) => {\n    try {\n        const { data, status } = await HttpService.post('/ocorrencias', ocorrenciaData);\n        \n        if (status === 200 || status === 201) {\n            return { data, status };\n        } else {\n            throw new Error('Falha ao salvar ocorrência');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Erro ao salvar ocorrência');\n    }\n};\n\nexport const buscarEstatisticas = async () => {\n    try {\n        const data = await HttpService.get('/ocorrencias/statistics');\n        return data;\n    } catch (error) {\n        throw new Error(error.message || 'Erro ao carregar estatísticas');\n    }\n};\n\nexport const buscarEstatisticasMensais = async (ano, mes) => {\n    try {\n        const body = { ano, mes };\n        const { data } = await HttpService.post('/ocorrencias/statistics/monthly', body);\n        return data;\n    } catch (error) {\n        throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar estatísticas mensais');\n    }\n};\n\n// usuário\nexport const buscarPerfilUsuario = async (userId) => {\n    try {\n        const data = await HttpService.get(`/auth/user/${userId}`);\n        return data;\n    } catch (error) {\n        throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar perfil do usuário');\n    }\n};\n\nexport const atualizarPerfilUsuario = async (camposAlterados) => {\n    try {\n        const { data, status } = await HttpService.put('/auth/me', camposAlterados);\n        \n        if (status === 200 || status === 201) {\n            if (camposAlterados.nome) {\n                localStorage.setItem(\"nome\", camposAlterados.nome);\n            }\n            if (camposAlterados.email) {\n                localStorage.setItem(\"email\", camposAlterados.email);\n            }\n            \n            return { data, status };\n        } else {\n            throw new Error('Falha ao atualizar perfil');\n        }\n    } catch (error) {\n        throw new Error(error.response?.data?.message || error.message || 'Erro ao atualizar perfil do usuário');\n    }\n};\n\nexport const buscarOcorrenciasFiltradas = async (filtros = {}) => {\n    try {\n        const body = {};\n        \n        if (filtros.dataInicial) {\n            const [ano, mes, dia] = filtros.dataInicial.split('-');\n            body.dataInicial = `${dia}/${mes}/${ano}`;\n        }\n        if (filtros.dataFinal) {\n            const [ano, mes, dia] = filtros.dataFinal.split('-');\n            body.dataFinal = `${dia}/${mes}/${ano}`;\n        }\n        if (filtros.natureza) {\n            body.natureza = filtros.natureza;\n        }\n        if (filtros.logradouro) {\n            body.logradouro = filtros.logradouro;\n        }\n        if (filtros.bairro) {\n            body.bairro = filtros.bairro;\n        }\n        \n        \n        const { data } = await HttpService.post('/ocorrencias/filtro', body);\n        \n        const dadosProcessados = data.map(ocorrencia => ({\n            id: ocorrencia.id,\n            numeroOcorrencia: ocorrencia.numeroOcorrencia,\n            natureza: ocorrencia.natureza?.replace(/\\s+/g, ' ').trim() || 'Não informado',\n            createdAt: ocorrencia.createdAt,\n            dataDespacho: ocorrencia.empenhos?.[0]?.despachado || null,\n            localizacao: {\n                bairro: ocorrencia.localizacao?.bairro?.replace(/^:\\s*/, '').replace(/\\s+/g, ' ').trim() || 'Não informado'\n            },\n            empenhos: ocorrencia.empenhos\n        }));\n        \n        return dadosProcessados;\n    } catch (error) {\n        \n        if (error.response?.status === 404) {\n            const errorMessage = error.response?.data?.message || '';\n            if (errorMessage.includes('index.html') || errorMessage.includes('uploads')) {\n                throw new Error('Erro no backend: O servidor está tentando servir arquivos estáticos em vez da API. Verifique a configuração das rotas no backend.');\n            }\n            throw new Error('Endpoint /ocorrencias/filtro não encontrado. Verifique se o backend está rodando corretamente.');\n        }\n        \n        throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar ocorrências');\n    }\n};\n\nexport const buscarOcorrenciaPorId = async (id) => {\n    try {\n        const data = await HttpService.get(`/ocorrencias/${id}`);\n        \n        return data;\n    } catch (error) {\n        \n        if (error.response?.status === 404) {\n            throw new Error('Ocorrência não encontrada. Verifique se o ID está correto.');\n        }\n        \n        throw new Error(error.response?.data?.message || error.message || 'Erro ao carregar detalhes da ocorrência');\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}